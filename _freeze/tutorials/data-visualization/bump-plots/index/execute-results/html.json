{
  "hash": "6bb6d64b8e16907f6a1e8898212c1e71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bump Plots with ggplot2\"\nsubtitle: \"Creating Professional Ranking Visualizations\"\ndescription: \"Learn how to create bump plots to visualize rankings and comparisons over time using ggplot2 and the ggbump package.\"\nauthor: \"EKIO Academy Team\"\ndate: \"2024-01-15\"\ncategories: [data-visualization, ggplot2, rankings]\nimage: \"../../../static/images/tutorials/replication_economist_bump_plot.jpeg\"\nformat:\n  html:\n    code-fold: false\n    toc: true\n    fig-width: 8\n    fig-height: 5\n---\n\n\n\n# Introduction to Bump Plots\n\nA **bump plot** shows different values of a variable across distinct contexts. It's similar to parallel trend charts but with smoother lines. This tutorial demonstrates how to create professional bump plots in R using ggplot2 and the specialized ggbump package.\n\nBump plots are particularly useful for visualizing rankings and comparisons. They help viewers track how different entities (countries, companies, teams) change position relative to each other across different metrics or time periods.\n\n## Setup\n\nWe'll use the specialized [{ggbump}](https://github.com/davidsjoberg/ggbump) package designed specifically for creating bump charts. The package is available on both CRAN and GitHub.\n\nIn bump plots, we want to compare the value of a variable across different contexts. We can compare the same groups over time or the same groups across different variables. These plots are typically organized as rankings to facilitate easy comparison between groups.\n\n### Common Applications\n\n- Olympic gold medals by country over different years\n- Most popular music genres by user over time\n- Population rankings of countries across decades\n- Real estate rankings across different criteria\n- Team rankings in sports leagues week by week\n- Country wealth rankings using different wealth metrics\n\n## Required Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggbump)\nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n\n## Basic Example\n\nThis first example is borrowed from the package documentation and illustrates the basics of `geom_bump`. The data must be in 'tidy' (longitudinal) format where point positions are specified by x and y arguments and groups are identified via the group aesthetic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear <- rep(2019:2021, 4)\nposition <- c(4, 2, 2, 3, 1, 4, 2, 3, 1, 1, 4, 3)\nplayer <- c(\"A\", \"A\", \"A\",\n            \"B\", \"B\", \"B\",\n            \"C\", \"C\", \"C\",\n            \"D\", \"D\", \"D\")\n\ndf <- data.frame(x = year,\n                 y = position,\n                 group = player)\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> x </th>\n   <th style=\"text-align:center;\"> y </th>\n   <th style=\"text-align:center;\"> group </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> A </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> A </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> A </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> B </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> B </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> B </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> C </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> C </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> C </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> D </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> D </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> D </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nTake time to carefully compare the entries in the table above with the result in the plot below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(year, position, color = player)) +\n  geom_bump()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n## Texas Housing Sales Example\n\nLet's analyze cities with the highest number of sales over the years using the familiar `txhousing` dataset. We'll create a plot showing the sales ranking over time.\n\nI'll remove 2015 since it's incomplete in the sample. Since there are over forty cities, I'll create a subset containing only cities with the highest sales in 2014.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find top-15 cities with highest sales in 2014\ntop_cities <- txhousing |>\n  # Select only 2014\n  filter(year == 2014) |>\n  # Calculate total sales in each city\n  summarise(total = sum(listings, na.rm = TRUE), .by = \"city\") |>\n  # Select top-15\n  slice_max(total, n = 15) |>\n  pull(city)\n\n# Calculate annual sales totals for the city subset and create annual ranking\nrank_housing <- txhousing |>\n  # Select only cities in the subset\n  filter(city %in% top_cities, year > 2005, year < 2015) |>\n  # Calculate total sales each year\n  summarise(\n    listing_year = sum(listings, na.rm = TRUE),\n    .by = c(\"city\", \"year\")\n    ) |>\n  # Rank cities within each year\n  mutate(rank = rank(-listing_year, \"first\"), .by = \"year\")\n```\n:::\n\n\nIn the plot below, each city has a different color, but I'll omit the color legend. Note the use of `scale_y_reverse` since we typically want to show the smallest values at the top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rank_housing, aes(year, rank, group = city, color = city)) +\n  geom_bump() +\n  scale_y_reverse() +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\nTo improve readability, we can add city names next to the lines using `geom_text`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_bump(\n    data = rank_housing,\n    aes(year, rank, group = city, color = city)\n    ) +\n  geom_text(\n    data = filter(rank_housing, year == max(year)),\n    aes(year, rank, label = city),\n    nudge_x = 0.1,\n    hjust = 0\n  ) +\n  scale_y_reverse() +\n  scale_x_continuous(limits = c(NA, 2017)) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n\nEven with city names, there are many lines to follow. Let's highlight just a few cities. Instead of the top 4 (Houston, Dallas, San Antonio, and Austin), which barely change ranking, let's highlight Bay Area, El Paso, Corpus Christi, and Tyler.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel_cities <- c(\"Bay Area\", \"El Paso\", \"Corpus Christi\", \"Tyler\")\n\nrank_housing <- rank_housing |>\n  mutate(\n    highlight = if_else(city %in% sel_cities, city, \"\"),\n    is_highlight = factor(if_else(city %in% sel_cities, 1L, 0L))\n  )\n```\n:::\n\n\nThe plot below requires considerably more code but improves the original in several aspects. Now we have better highlighting for cities of interest, better-defined axes, and redundant background lines have been removed.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot() +\n  # Gray lines (non-highlighted)\n  geom_bump(\n    data = filter(rank_housing, is_highlight == 0),\n    aes(year, rank, group = city, color = highlight),\n    linewidth = 0.8,\n    smooth = 8\n    ) +\n  # Colored lines (highlighted)\n  geom_bump(\n    data = filter(rank_housing, is_highlight == 1),\n    aes(year, rank, group = city, color = highlight),\n    linewidth = 2,\n    smooth = 8\n  ) +\n  # Points\n  geom_point(\n    data = rank_housing,\n    aes(year, rank, color = highlight),\n    size = 4\n  ) +\n  # Non-highlighted names\n  geom_text(\n    data = filter(rank_housing, year == max(year), !(city %in% sel_cities)),\n    aes(year, rank, label = city),\n    nudge_x = 0.2,\n    hjust = 0,\n    color = \"gray20\"\n  ) +\n  # Highlighted names (bold)\n  geom_text(\n    data = filter(rank_housing, year == max(year), city %in% sel_cities),\n    aes(year, rank, label = city),\n    nudge_x = 0.2,\n    hjust = 0,\n    fontface = \"bold\"\n  ) +\n  # Add axes for better readability\n  scale_y_reverse(breaks = 1:15) +\n  scale_x_continuous(limits = c(NA, 2017), breaks = 2006:2014) +\n  # Colors\n  scale_color_manual(\n    values = c(\"gray70\", \"#2f4858\", \"#86bbd8\", \"#f6ae2d\", \"#f26419\")\n  ) +\n  # Theme elements\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n# Replicating The Economist\n\nAs a final exercise, let's replicate a chart from The Economist magazine. The [original article](https://www.economist.com/graphic-detail/2023/12/15/the-worlds-richest-countries-in-2023) discusses different ways to measure and compare wealth between countries.\n\nThe chart shows a ranking of the world's richest countries according to three metrics:\n\n1. **GDP per capita** at current market rates - the most basic wealth measure\n2. **GDP per capita in PPP** (purchasing power parity) - adjusted for cost of living\n3. **GDP per capita in PPP adjusted for hours worked** - shows how productive countries are per hour\n\n![Original chart from The Economist](../../../static/images/tutorials/replication_economist_bump_plot.jpeg){fig-align=\"center\" width=\"400\"}\n\nNote how this measure considerably elevates European countries like Belgium, Germany, Austria, and Denmark, while lowering some countries like the USA and Singapore.\n\nThe original data is available on [The Economist's GitHub](https://github.com/TheEconomist), though I couldn't find the specific code for this chart. I'll use the Lato font from Google Fonts instead of The Economist's proprietary font.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\n\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\n```\n:::\n\n\n## Data Preparation\n\nMuch of creating the visualization above involves data manipulation. Let's go step by step.\n\nFirst, I'll define useful objects like the names of countries to highlight and columns containing GDP variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_sel <- c(\"Norway\", \"Belgium\", \"Austria\", \"United States\", \"Germany\")\n\nmeasures <- c(\"gdp_over_pop\", \"gdp_ppp_over_pop\", \"gdp_ppp_over_k_hours_worked\")\n\nsub <- dat |>\n  select(country, year, all_of(measures)) |>\n  na.omit()\n```\n:::\n\n\nThe essential transformation is converting data to tidy format and ranking observations within each GDP metric:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranking <- sub |>\n  filter(year == max(year)) |>\n  pivot_longer(cols = -c(country, year), names_to = \"measure\") |>\n  mutate(rank = rank(-value), .by = \"measure\")\n```\n:::\n\n\nNow I'll create auxiliary variables useful for mapping different aesthetic elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranking <- ranking |>\n  mutate(\n    highlight = if_else(country %in% countries_sel, country, \"\"),\n    highlight = factor(highlight, levels = c(countries_sel, \"\")),\n    is_highlight = factor(if_else(country %in% countries_sel, 1L, 0L)),\n    rank_labels = if_else(rank %in% c(1, 5, 10, 15, 20), rank, NA),\n    rank_labels = stringr::str_replace(rank_labels, \"^1$\", \"1st\"),\n    measure = factor(measure, levels = measures)\n    )\n```\n:::\n\n\nFinally, I'll define line colors and create an auxiliary table with text for the top of the chart:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncores <- c(\"#101010\", \"#f7443e\", \"#8db0cc\", \"#fa9494\", \"#225d9f\", \"#c7c7c7\")\n\ndf_gdp <- tibble(\n  measure = measures,\n  measure_label = c(\n    \"GDP per person at market rates\",\n    \"Adjusted for cost differences*\",\n    \"Adjusted for costs and hours worked\"\n  ),\n  position = -1.2\n)\n\ndf_gdp <- df_gdp |>\n  mutate(\n    measure = factor(measure, levels = measures),\n    measure_label = stringr::str_wrap(measure_label, width = 12),\n    measure_label = paste0(\"  \", measure_label)\n    )\n```\n:::\n\n\nThe simplified version of the chart is summarized below. Note the use of `coord_cartesian` to \"crop the chart\" without losing information. It's unusual to use `linewidth` as an aesthetic within `aes`, but you can see how this is quite simple and saves several lines of code compared to the previous chart:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ranking, aes(measure, rank, group = country)) +\n  geom_bump(aes(color = highlight, linewidth = is_highlight)) +\n  geom_point(shape = 21, color = \"white\", aes(fill = highlight), size = 3) +\n  geom_text(\n    data = filter(ranking, measure == measures[[3]]),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  coord_cartesian(ylim = c(21, -2)) +\n  scale_color_manual(values = cores) +\n  scale_fill_manual(values = cores) +\n  scale_linewidth_manual(values = c(0.5, 1.2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\nThe final code is quite extensive, but the result is very satisfactory:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(ranking, aes(measure, rank, group = country)) +\n  geom_bump(aes(color = highlight, linewidth = is_highlight)) +\n  geom_point(shape = 21, color = \"white\", aes(fill = highlight), size = 3) +\n  # Non-highlighted country names\n  geom_text(\n    data = filter(ranking, measure == measures[[3]], is_highlight != 1L),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  # Highlighted country names (bold)\n  geom_text(\n    data = filter(ranking, measure == measures[[3]], is_highlight == 1L),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\",\n    fontface = \"bold\"\n  ) +\n  # Left axis (1st, 5, 10, 15, 20)\n  geom_text(\n    data = filter(ranking, measure == measures[[1]]),\n    aes(x = measure, y = rank, label = rank_labels),\n    nudge_x = -0.15,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  # Descriptive text above the chart\n  geom_text(\n    data = df_gdp,\n    aes(x = measure, y = position, label = measure_label),\n    inherit.aes = FALSE,\n    hjust = 0,\n    family = \"Lato\",\n    fontface = \"bold\"\n  ) +\n  # Position downward arrows\n  annotate(\"text\", x = 1, y = -2.2, label = expression(\"\\u2193\")) +\n  annotate(\"text\", x = 2, y = -2.2, label = expression(\"\\u2193\")) +\n  annotate(\"text\", x = 3, y = -2.2, label = expression(\"\\u2193\")) +\n  # Crop the chart\n  coord_cartesian(ylim = c(21, -2)) +\n  # Colors\n  scale_color_manual(values = cores) +\n  scale_fill_manual(values = cores) +\n  # Line thickness\n  scale_linewidth_manual(values = c(0.5, 1.2)) +\n  # Theme elements\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"#ffffff\", color = NA),\n    plot.background = element_rect(fill = \"#ffffff\", color = NA),\n    panel.grid = element_blank(),\n    legend.position = \"none\",\n    axis.text = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\n## Summary\n\nBump plots are excellent for visualizing rankings and comparisons across different contexts. Key takeaways:\n\n- Use the `ggbump` package for smooth, professional bump charts\n- Data must be in tidy/longitudinal format\n- `scale_y_reverse()` is useful for typical ranking displays\n- Highlighting specific groups improves readability in complex charts\n- Consider using `coord_cartesian()` to focus on relevant ranges\n\nThe goal of these tutorials is to accomplish as much as possible using `ggplot2`, though in practice, text boxes above charts can be created in external software for more complex designs.\n\n---\n\n*Ready to create more advanced visualizations? Check out our [Interactive Dashboards](../interactive-dashboards/index.qmd) tutorial or explore our [complete ggplot2 guide](../ggplot2-basics/index.qmd).*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}