{
  "hash": "1ac9041ce9e9fa8e0bc3a34419ea6ca6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bump Plots com ggplot2 (Português)\"\nsubtitle: \"Criando Visualizações Profissionais de Rankings\"\ndescription: \"Aprenda a criar bump plots para visualizar rankings e comparações ao longo do tempo usando ggplot2 e o pacote ggbump.\"\nauthor: \"Equipe EKIO Academy\"\ndate: \"2024-01-15\"\ncategories: [visualizacao-dados, ggplot2, rankings]\nimage: \"static/images/tutorials/replication_economist_bump_plot.jpeg\"\nlang: pt-BR\nformat:\n  html:\n    code-fold: false\n    toc: true\n    fig-width: 8\n    fig-height: 5\n---\n\n\n\n# Introdução aos Bump Plots\n\nUm **bump plot** mostra diferentes valores de uma variável em contextos distintos. É similar a um gráfico de tendências paralelas mas com linhas mais suaves. Este tutorial demonstra como criar bump plots profissionais no R usando ggplot2 e o pacote especializado ggbump.\n\nOs bump plots são particularmente úteis para visualizar rankings e comparações. Eles ajudam os visualizadores a acompanhar como diferentes entidades (países, empresas, times) mudam de posição em relação umas às outras através de diferentes métricas ou períodos de tempo.\n\n## Setup\n\nUsaremos o pacote especializado [{ggbump}](https://github.com/davidsjoberg/ggbump) desenvolvido especificamente para criar bump charts. O pacote está disponível tanto no CRAN quanto no GitHub.\n\nNeste tipo de gráfico, queremos comparar o valor de uma variável em diferentes contextos. Podemos ter uma comparação entre os mesmos grupos ao longo do tempo ou os mesmos grupos ao longo de variáveis distintas. Em geral, estes gráficos são organizados em forma de rankings e têm como objetivo facilitar a comparação entre grupos.\n\n### Aplicações Comuns\n\n- Medalhas de ouro nas olimpíadas por país ao longo dos anos\n- Gêneros musicais mais populares por usuário ao longo do tempo\n- Rankings populacionais de países ao longo de décadas\n- Rankings imobiliários através de diferentes critérios\n- Rankings de times em ligas esportivas semana a semana\n- Rankings de riqueza de países usando diferentes métricas\n\n## Pacotes Necessários\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggbump)\nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n\n## Exemplo Básico\n\nEste primeiro exemplo é emprestado da documentação do pacote e ilustra o básico da função `geom_bump`. Os dados devem estar em formato 'tidy' (longitudinal) onde as posições dos pontos são especificadas pelos argumentos x e y e os grupos identificados via estética group.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyear <- rep(2019:2021, 4)\nposition <- c(4, 2, 2, 3, 1, 4, 2, 3, 1, 1, 4, 3)\nplayer <- c(\"A\", \"A\", \"A\",\n            \"B\", \"B\", \"B\", \n            \"C\", \"C\", \"C\",\n            \"D\", \"D\", \"D\")\n\ndf <- data.frame(x = year,\n                 y = position,\n                 group = player)\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> x </th>\n   <th style=\"text-align:center;\"> y </th>\n   <th style=\"text-align:center;\"> group </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> A </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> A </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> A </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> B </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> B </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> B </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> C </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> C </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> C </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2019 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> D </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2020 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> D </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2021 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> D </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nVale tirar um tempo para comparar, com calma, as entradas na tabela acima e o resultado no gráfico abaixo:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(df, aes(year, position, color = player)) +\n  geom_bump()\n```\n\n::: {.cell-output-display}\n![](index-pt_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Exemplo: Venda de Imóveis no Texas\n\nPodemos analisar as cidades com maior número de vendas ao longo dos anos usando a já conhecida `txhousing`. Vamos criar um gráfico que mostra o ranking de vendas de imóveis ao longo dos anos.\n\nRemovo o ano de 2015, pois este ano não está completo na amostra. Como há mais de quarenta cidades na amostra, crio uma subamostra que contém apenas as cidades com maior número de vendas em 2014.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Encontra as top-15 cidades com maior número de vendas em 2014\ntop_cities <- txhousing |> \n  # Seleciona apenas o ano de 2014\n  filter(year == 2014) |> \n  # Calcula o total de vendas em cada cidade\n  summarise(total = sum(listings, na.rm = TRUE), .by = \"city\") |> \n  # Seleciona o top-15\n  slice_max(total, n = 15) |> \n  pull(city)\n\n# Calcula o total de vendas anuais na subamostra de cidades e faz o ranking anual\nrank_housing <- txhousing |> \n  # Seleciona apenas cidades dentro da subamostra\n  filter(city %in% top_cities, year > 2005, year < 2015) |> \n  # Calcula o total de vendas a cada ano\n  summarise(\n    listing_year = sum(listings, na.rm = TRUE),\n    .by = c(\"city\", \"year\")\n    ) |> \n  # Faz o ranking das cidades dentro de cada ano\n  mutate(rank = rank(-listing_year, \"first\"), .by = \"year\")\n```\n:::\n\n\nNo gráfico abaixo, cada cidade tem uma cor diferente, mas omito a legenda de cores. Note o uso de `scale_y_reverse` já que, tipicamente, queremos mostrar os menores valores na parte superior do gráfico:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rank_housing, aes(year, rank, group = city, color = city)) +\n  geom_bump() +\n  scale_y_reverse() +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](index-pt_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nPara melhorar a legibilidade do gráfico podemos colocar o nome das cidades ao lado das linhas usando `geom_text`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_bump(\n    data = rank_housing,\n    aes(year, rank, group = city, color = city)\n    ) +\n  geom_text(\n    data = filter(rank_housing, year == max(year)),\n    aes(year, rank, label = city),\n    nudge_x = 0.1,\n    hjust = 0\n  ) +\n  scale_y_reverse() +\n  scale_x_continuous(limits = c(NA, 2017)) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](index-pt_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nMesmo com o nome das cidades, há muitas linhas para acompanhar no gráfico. Vamos destacar apenas algumas cidades. Em vez do top 4 (Houston, Dallas, San Antonio e Austin), que praticamente não se alternam no ranking, vamos destacar Bay Area, El Paso, Corpus Christi e Tyler.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsel_cities <- c(\"Bay Area\", \"El Paso\", \"Corpus Christi\", \"Tyler\")\n\nrank_housing <- rank_housing |> \n  mutate(\n    highlight = if_else(city %in% sel_cities, city, \"\"),\n    is_highlight = factor(if_else(city %in% sel_cities, 1L, 0L))\n  )\n```\n:::\n\n\nO gráfico abaixo exige um código consideravelmente mais longo, mas melhora o gráfico original em vários aspectos. Agora temos um maior destaque para as cidades de interesse, eixos melhor definidos e linhas de fundo redundantes foram removidas:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot() +\n  # Linhas em cinza (sem destaque)\n  geom_bump(\n    data = filter(rank_housing, is_highlight == 0),\n    aes(year, rank, group = city, color = highlight),\n    linewidth = 0.8,\n    smooth = 8\n    ) +\n  # Linhas coloridas (com destaque)\n  geom_bump(\n    data = filter(rank_housing, is_highlight == 1),\n    aes(year, rank, group = city, color = highlight),\n    linewidth = 2,\n    smooth = 8\n  ) +\n  # Pontos \n  geom_point(\n    data = rank_housing,\n    aes(year, rank, color = highlight),\n    size = 4\n  ) +\n  # Nomes sem destaque\n  geom_text(\n    data = filter(rank_housing, year == max(year), !(city %in% sel_cities)),\n    aes(year, rank, label = city),\n    nudge_x = 0.2,\n    hjust = 0,\n    color = \"gray20\"\n  ) +\n  # Nome com destaque (em negrito)\n  geom_text(\n    data = filter(rank_housing, year == max(year), city %in% sel_cities),\n    aes(year, rank, label = city),\n    nudge_x = 0.2,\n    hjust = 0,\n    fontface = \"bold\"\n  ) +\n  # Adiciona os eixos para melhorar leitura do gráfico\n  scale_y_reverse(breaks = 1:15) +\n  scale_x_continuous(limits = c(NA, 2017), breaks = 2006:2014) +\n  # Cores\n  scale_color_manual(\n    values = c(\"gray70\", \"#2f4858\", \"#86bbd8\", \"#f6ae2d\", \"#f26419\")\n  ) +\n  # Elementos temáticos\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index-pt_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# Replicando The Economist\n\nComo exercício final vamos replicar um gráfico da revista The Economist. O [artigo original](https://www.economist.com/graphic-detail/2023/12/15/the-worlds-richest-countries-in-2023) discute diferentes maneiras de mensurar e comparar a riqueza entre países.\n\nO gráfico mostra um ranking dos países mais ricos do mundo segundo três métricas:\n\n1. **PIB per capita** a preços correntes - a medida mais básica de riqueza\n2. **PIB per capita em PPC** (paridade do poder de compra) - ajustado pelo custo de vida\n3. **PIB per capita em PPC ajustado por horas trabalhadas** - mostra quão produtivos são os países por hora\n\n![Gráfico original do The Economist](static/images/tutorials/replication_economist_bump_plot.jpeg){fig-align=\"center\" width=\"400\"}\n\nNote como esta medida eleva consideravelmente a posição de países europeus como Bélgica, Alemanha, Áustria e Dinamarca, enquanto derruba alguns países como EUA e Singapura.\n\nOs dados originais estão disponíveis no [GitHub do The Economist](https://github.com/TheEconomist), mas não consegui encontrar o código específico para este gráfico. Vou utilizar a fonte Lato do Google Fonts em vez da fonte proprietária do The Economist.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(showtext)\n\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\n```\n:::\n\n\n## Preparação dos Dados\n\nBoa parte da construção da visualização acima está na manipulação dos dados. Vamos fazer um passo-a-passo.\n\nPrimeiro defino alguns objetos úteis como o nome dos países que serão destacados e o nome das colunas que contém as variáveis de PIB:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncountries_sel <- c(\"Norway\", \"Belgium\", \"Austria\", \"United States\", \"Germany\")\n\nmeasures <- c(\"gdp_over_pop\", \"gdp_ppp_over_pop\", \"gdp_ppp_over_k_hours_worked\")\n\nsub <- dat |> \n  select(country, year, all_of(measures)) |> \n  na.omit()\n```\n:::\n\n\nA transformação essencial é converter os dados em formato tidy e ranquear as observações dentro de cada métrica de PIB:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nranking <- sub |> \n  filter(year == max(year)) |> \n  pivot_longer(cols = -c(country, year), names_to = \"measure\") |> \n  mutate(rank = rank(-value), .by = \"measure\")\n```\n:::\n\n\nAgora, mais por conveniência, eu crio algumas variáveis auxiliares que serão úteis para mapear os diferentes elementos estéticos:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nranking <- ranking |> \n  mutate(\n    highlight = if_else(country %in% countries_sel, country, \"\"),\n    highlight = factor(highlight, levels = c(countries_sel, \"\")),\n    is_highlight = factor(if_else(country %in% countries_sel, 1L, 0L)),\n    rank_labels = if_else(rank %in% c(1, 5, 10, 15, 20), rank, NA),\n    rank_labels = stringr::str_replace(rank_labels, \"^1$\", \"1st\"),\n    measure = factor(measure, levels = measures)\n    )\n```\n:::\n\n\nPor fim, eu defino as cores das linhas e crio uma tabela auxiliar que contém apenas o texto que vai em cima do gráfico:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncores <- c(\"#101010\", \"#f7443e\", \"#8db0cc\", \"#fa9494\", \"#225d9f\", \"#c7c7c7\")\n\ndf_gdp <- tibble(\n  measure = measures,\n  measure_label = c(\n    \"PIB per capita a preços de mercado\",\n    \"Ajustado por diferenças de custo*\",\n    \"Ajustado por custos e horas trabalhadas\"\n  ),\n  position = -1.2\n)\n\ndf_gdp <- df_gdp |> \n  mutate(\n    measure = factor(measure, levels = measures),\n    measure_label = stringr::str_wrap(measure_label, width = 12),\n    measure_label = paste0(\"  \", measure_label)\n    )\n```\n:::\n\n\nA versão simplificada do gráfico está resumida no código abaixo. Vale notar o uso da `coord_cartesian` para \"cortar o gráfico\" sem perder informação. Não é muito usual utilizar `linewidth` como um elemento estético dentro de `aes` mas pode-se ver como isto é bastante simples:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(ranking, aes(measure, rank, group = country)) +\n  geom_bump(aes(color = highlight, linewidth = is_highlight)) +\n  geom_point(shape = 21, color = \"white\", aes(fill = highlight), size = 3) +\n  geom_text(\n    data = filter(ranking, measure == measures[[3]]),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  coord_cartesian(ylim = c(21, -2)) +\n  scale_color_manual(values = cores) +\n  scale_fill_manual(values = cores) +\n  scale_linewidth_manual(values = c(0.5, 1.2))\n```\n\n::: {.cell-output-display}\n![](index-pt_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nO código final é bastante extenso, mas o resultado é muito satisfatório:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(ranking, aes(measure, rank, group = country)) +\n  geom_bump(aes(color = highlight, linewidth = is_highlight)) +\n  geom_point(shape = 21, color = \"white\", aes(fill = highlight), size = 3) +\n  # Nome dos países sem destaque\n  geom_text(\n    data = filter(ranking, measure == measures[[3]], is_highlight != 1L),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  # Nome dos países com destaque (em negrito)\n  geom_text(\n    data = filter(ranking, measure == measures[[3]], is_highlight == 1L),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\",\n    fontface = \"bold\"\n  ) +\n  # \"Eixo\" na esquerda (1st, 5, 10, 15, 20)\n  geom_text(\n    data = filter(ranking, measure == measures[[1]]),\n    aes(x = measure, y = rank, label = rank_labels),\n    nudge_x = -0.15,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  # Texto descritivo acima do gráfico\n  geom_text(\n    data = df_gdp,\n    aes(x = measure, y = position, label = measure_label),\n    inherit.aes = FALSE,\n    hjust = 0,\n    family = \"Lato\",\n    fontface = \"bold\"\n  ) +\n  # Posiciona as flechas apontando para baixo\n  annotate(\"text\", x = 1, y = -2.2, label = expression(\"\\u2193\")) +\n  annotate(\"text\", x = 2, y = -2.2, label = expression(\"\\u2193\")) +\n  annotate(\"text\", x = 3, y = -2.2, label = expression(\"\\u2193\")) +\n  # Corta o gráfico\n  coord_cartesian(ylim = c(21, -2)) +\n  # Cores\n  scale_color_manual(values = cores) +\n  scale_fill_manual(values = cores) +\n  # Espessura das linhas\n  scale_linewidth_manual(values = c(0.5, 1.2)) +\n  # Elementos temáticos\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"#ffffff\", color = NA),\n    plot.background = element_rect(fill = \"#ffffff\", color = NA),\n    panel.grid = element_blank(),\n    legend.position = \"none\",\n    axis.text = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index-pt_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Resumo\n\nOs bump plots são excelentes para visualizar rankings e comparações em diferentes contextos. Pontos principais:\n\n- Use o pacote `ggbump` para bump charts suaves e profissionais\n- Dados devem estar em formato tidy/longitudinal\n- `scale_y_reverse()` é útil para exibições típicas de ranking\n- Destacar grupos específicos melhora a legibilidade em gráficos complexos\n- Considere usar `coord_cartesian()` para focar em ranges relevantes\n\nO objetivo destes posts é de sempre fazer o máximo possível usando `ggplot2` mas, na prática, as caixas de texto acima do gráfico podem ser feitas num software externo para designs mais complexos.\n\n---\n\n*Pronto para criar visualizações mais avançadas? Confira nosso tutorial de [Dashboards Interativos](../dashboards-interativos/index.qmd) ou explore nosso [guia completo de ggplot2](../ggplot2-basico/index.qmd).*",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}